{"version":3,"sources":["Tmdb.js","components/Header/index.js","components/FeaturedMovie/index.js","components/MovieList/index.js","components/Footer/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","Header","black","className","href","src","alt","FeaturedMovie","item","firstDate","Date","first_air_date","genres","i","push","name","description","overview","length","substring","style","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","id","join","useState","scrollX","setScrollX","onClick","x","Math","round","window","innerWidth","fontSize","listWidth","results","marginLeft","width","map","key","poster_path","original_title","Footer","target","App","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","movieChosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","MovieList","cx","cy","r","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcfc5274.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nconst API_KEY = '96b1128d8054f935381ec276aba5c6bf';\r\nconst API_BASE = 'https://api.themoviedb.org/3'; \r\n\r\n/* \r\n- originais da netflix\r\n- recomendados (trending)\r\n- em alta (top rated)\r\n- filmes de ação\r\n- filmes de comédia\r\n- filmes de terror\r\n- filmes de romance\r\n- filmes de comédia\r\n- documentários\r\n*/\r\n\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`)\r\n    const json = await req.json()\r\n    return json;\r\n}\r\n\r\n// Fetch nas categorias desejadas\r\nexport default {\r\n    getHomeList: async() => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais da Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'top rated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n\r\n    // Pegando as informações de um filme específico (para o FeaturedMovie)\r\n    getMovieInfo: async(movieId, type) => {\r\n        let info = {}\r\n        \r\n        if(movieId){\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n                \r\n                default: \r\n                    info = null;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return info;\r\n    }\r\n}","import React from 'react';\r\nimport './header.css';\r\n\r\nfunction Header({black}){\r\n    return(\r\n        <header className={black ? 'black-background' : ''}>\r\n            <div className=\"header-logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://ik.imagekit.io/zqxyh6u3ylz/Netflix/netflix-logo_ske-ZD_gL.png?updatedAt=1630868412855\" alt=\"Netflix\" />\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"header-user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://ik.imagekit.io/zqxyh6u3ylz/Netflix/user_oTNp1qKbf.png?updatedAt=1630868606216\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './featuredMovie.css';\r\n\r\n\r\nfunction FeaturedMovie({item}){\r\n    \r\n    // Ano de lançamento da série\r\n    let firstDate = new Date(item.first_air_date);\r\n\r\n    // Lista de gêneros da série\r\n    let genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name);\r\n    }\r\n\r\n    // Define tamanho da descrição a ser exibida\r\n    let description = item.overview;\r\n    if(description.length > 200){\r\n        description = description.substring(0, 200)+'...'\r\n    }\r\n\r\n    return(\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}> \r\n            <div className=\"featured-horizontal-effect\">\r\n                <div className=\"featured-vertical-effect\">\r\n                    <div className=\"featured-name\">{item.original_name}</div>\r\n\r\n                    <div className=\"featured-info\">\r\n                        <div className=\"featured-points\">Nota {item.vote_average}</div>\r\n                        <div className=\"featured-year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured-seasons\">\r\n                            {item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}    \r\n                    </div>\r\n                    <div className=\"featured-description\">{description}</div>\r\n\r\n                    <div className=\"featured-buttons\">\r\n                        <a href={`/watch/${item.id}`} className=\"watch-button\">► Assistir</a>\r\n                        <a href={`/list/add/${item.id}`} className=\"mylist-button\">+ Minha Lista</a>\r\n                    </div>\r\n\r\n                    <div className=\"featured-genres\">\r\n                        <strong>Gêneros:</strong> {genres.join(', ')}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </section>\r\n    );\r\n}\r\n\r\nexport default FeaturedMovie;","import React, { useState } from 'react';\r\nimport './movieList.css';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default({title, items}) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n    \r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2)\r\n        if(x > 0){\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2)\r\n        let listWidth = items.results.length * 150;\r\n        if((window.innerWidth - listWidth) > x){\r\n            x = window.innerWidth - listWidth - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n    \r\n    \r\n    \r\n    return(\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow-left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow-right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{fontSize: 50}} />\r\n            </div>\r\n\r\n            <div className=\"movieRow-listarea\">\r\n                <div className=\"movieRow-list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow-item\" >\r\n                            <img src={`https://image.tmdb.org/t/p/w300/${item.poster_path}`} alt={item.original_title}></img>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <footer>\r\n            <p>Direitos de imagem para\r\n                <a href=\"https://www.netflix.com/br/\" target=\"_new\"> Netflix</a> \r\n            </p>\r\n            <p>Dados obtidos de themoviedb.org</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport Tmdb from './Tmdb';\n\nimport Header from './components/Header';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport MovieList from './components/MovieList';\nimport Footer from './components/Footer';\n\n\nfunction App() {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n\n  useEffect(() => {   \n    const loadAll = async () => {\n      // Pegando a lista total de filmes\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // Pegando o featured (originais do Netflix aleatoriamente)\n      let originals = list.filter(i => i.slug === 'originals')\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let movieChosen = originals[0].items.results[randomChosen]\n      let chosenInfo = await Tmdb.getMovieInfo(movieChosen.id, 'tv')\n      setFeaturedData(chosenInfo)\n    }\n\n    loadAll();\n  }, []);\n\n\n  // Monitora o evento para scroll do header\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true)\n      }\n      else{\n        setBlackHeader(false)\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener)\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener)\n    }\n  })\n\n  \n  return(\n    <div className=\"page\">\n\n      <Header black={blackHeader}/>\n\n      {featuredData && \n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieList key={key} title={item.title} items={item.items} />\n        ))}\n      </section>  \n    \n      <Footer />\n      \n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <svg>\n            <circle cx=\"70\" cy=\"70\" r=\"70\"></circle>\n          </svg>\n        </div>    \n      }\n\n    </div>\n  )\n} \n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}